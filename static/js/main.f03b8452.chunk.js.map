{"version":3,"sources":["Square.js","Button.js","Legend.js","SolvingAlgorithms/DepthFirst.js","SolvingAlgorithms/BreadthFirst.js","SolvingAlgorithms/Djikstras.js","SolvingAlgorithms/BellmanFord.js","Grid.js","SolvingAlgorithms/AStar.js","Instructions.js","App.js","index.js"],"names":["start","end","choose","algo","Square","props","state","id","className","onClick","solving","value","document","getElementsByClassName","style","onMouseEnter","hover","React","Component","Button","onResetPath","onReset","type","onHover","onDiagonal","seeWorking","Legend","Box","r","c","this","prevRow","prevCol","Heap","weight","node","length","index","w","push","temp","i","Math","floor","min","pop","tempMin","nextIndex","grid","visitedNodes","finalPath","distance","d","diagonal","working","Grid","squares","Array","fill","slice","setState","alert","solvable","j","s1","s2","e1","e2","t1","t2","num","visited","prevBoard","level","shift","getRow","getCol","temp1","breadthFirstMain","nodesToVisit","depthFirstMain","obj","pushHeap","empty","popHeap","trunc","sqrt","djikstrasMain","k","update","bellmanFordMain","pow","aStarMain","handle","setInterval","colorGrid","clearInterval","handleClick","renderSquare","handleSolve","handleReset","handleHoverChanged","diagonalsEnabled","enableAlgorithmWorking","handleResetPath","renderRow","Instructions","isActive","role","data-dismiss","aria-label","hideInstructions","aria-hidden","href","target","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f03b8452.chunk.js","sourcesContent":["import React from 'react';\r\nimport {hover} from './Grid';\r\nimport {solving} from './Grid';\r\nimport 'c:/UMICH/Projects/path-finding/src/styles/index.css';\r\n\r\nlet start = false;\r\nlet end = false;\r\nlet choose = true;\r\nlet solved = false;\r\n\r\n//If the board has been reset\r\nfunction resetStartEnd() {\r\n    start = false;\r\n    end = false;\r\n    solved = false;\r\n}\r\n\r\n//If the board has been solved\r\nfunction isSolved() {\r\n    solved = true;\r\n}\r\n\r\n//Represents each individual square\r\nclass Square extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          id: this.props.id,\r\n        };\r\n      }\r\n    render() {\r\n        return (\r\n            <button className=\"square\"\r\n             onClick={() => {\r\n                 if(!solving) {\r\n                    if(!this.props.value || this.props.value === 'p') {\r\n                        choose = true;\r\n                        if(!start) {\r\n                            document.getElementsByClassName('square')[this.props.id].style = 'background-color: blue';\r\n                            this.props.onClick();\r\n                            start = true;\r\n                        } else if(!end) {\r\n                            document.getElementsByClassName('square')[this.props.id].style = 'background-color: green';\r\n                            this.props.onClick();\r\n                            end = true;\r\n                        } else {\r\n                            document.getElementsByClassName('square')[this.props.id].style = 'background-color: grey';\r\n                            this.props.onClick();\r\n                        }\r\n                    } else {\r\n                        if(this.props.value === 's') {\r\n                            start = false;\r\n                        } else if(this.props.value === 'e') {\r\n                            end = false;\r\n                        }\r\n                        choose = false;\r\n                        document.getElementsByClassName('square')[this.props.id].style = 'background-color: white';\r\n                        this.props.onClick();\r\n                    }\r\n                }\r\n                }}\r\n                onMouseEnter={() => {\r\n                    if(!solving) {\r\n                        if(hover) {\r\n                            if(start && end) {\r\n                                if(this.props.value === 'o') {\r\n                                    choose = false;\r\n                                    document.getElementsByClassName('square')[this.props.id].style = 'background-color: white';\r\n                                    this.props.onClick();\r\n                                } else if(this.props.value !== 's' && this.props.value !== 'e'){\r\n                                    choose = true;\r\n                                    document.getElementsByClassName('square')[this.props.id].style = 'background-color: grey';\r\n                                    this.props.onClick();\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }}\r\n             >\r\n            </button>\r\n        );\r\n    }\r\n}\r\nexport default Square\r\nexport {start}\r\nexport {end}\r\nexport {choose}\r\nexport {resetStartEnd}\r\nexport {isSolved}\r\nexport {solved}\r\n","import React from 'react';\r\nimport 'c:/UMICH/Projects/path-finding/src/styles/button.css';\r\nlet algo;\r\n\r\n//Buttons for solving algorithms and checkboxes for advanced features\r\nclass Button extends React.Component {\r\n    render() {\r\n        return (\r\n        <div>\r\n        <div className=\"header\">\r\n            <span className=\"title\"><b>PathFinding Vision</b></span>\r\n            <button className=\"findButton\" onClick={ () => {\r\n                algo = 1;\r\n                this.props.onClick()}}>\r\n                Breadth First Search\r\n            </button>\r\n            <button className=\"findButton\" onClick={ () => {\r\n                algo = 2;\r\n                this.props.onClick()}}>\r\n                Depth First Search\r\n            </button>\r\n            <button className=\"findButton\" onClick={ () => {\r\n                algo = 3;\r\n                this.props.onClick()}}>\r\n                Djikstra's\r\n            </button>\r\n            <button className=\"findButton\" onClick={ () => {\r\n                algo = 4;\r\n                this.props.onClick()}}>\r\n                Bellman-Ford\r\n            </button>\r\n            <button className=\"findButton\" onClick={ () => {\r\n                algo = 5;\r\n                this.props.onClick()}}>\r\n                A* Search\r\n            </button>\r\n            <button className=\"findButton\" onClick={ () => this.props.onResetPath()}>\r\n                Remove Path\r\n            </button>\r\n            <button className=\"findButton\" onClick={ () => this.props.onReset()}>\r\n                Reset Board\r\n            </button>\r\n            </div>\r\n            <div className=\"check\">\r\n                <div><input type=\"checkbox\" onClick={ () => this.props.onHover()}/> Enable obstacles upon hover</div>\r\n                <div><input type=\"checkbox\" onClick={ () => this.props.onDiagonal()}/> Enable diagonals in path</div>\r\n                <div><input type=\"checkbox\" onClick={ () => this.props.seeWorking()}/> See algorithm's working</div>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport {algo}\r\nexport default Button","import React from 'react';\r\nimport 'c:/UMICH/Projects/path-finding/src/styles/legend.css';\r\n\r\n//Represents the legend\r\nclass Legend extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"legend\">\r\n                <div className=\"bluebox\"></div><div className=\"t1\">Starting Node</div>\r\n                <div className=\"greenbox\"></div><div className=\"t2\">Ending Node</div>\r\n                <div className=\"greybox\"></div><div className=\"t3\">Obstacle Node</div>\r\n                <div className=\"yellowbox\"></div><div className=\"t4\">Path Node</div>\r\n                <div className=\"vbox1\"></div><div className=\"vbox2\"></div><div className=\"vbox3\"></div><div className=\"vbox4\"></div><div className=\"t5\">Visited Node</div>\r\n                <div className=\"whitebox\"></div><div className=\"t6\">Unvisited Node</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Legend","import {grid} from '../Grid';\r\nimport {diagonal} from '../Grid';\r\nimport {visitedNodes} from '../Grid';\r\nimport {finalPath} from '../Grid';\r\n\r\n//Implementation of Depth First Search Algorithm\r\n\r\nclass Box {\r\n    constructor(r, c) {\r\n        this.prevRow = r;\r\n        this.prevCol = c;\r\n    }\r\n    getRow() {\r\n        return this.prevRow;\r\n    }\r\n    getCol() {\r\n        return this.prevCol;\r\n    }\r\n}\r\n\r\nfunction depthFirstMain() {\r\n    let i, j, s1, s2, e1, e2, t1, t2, num = 0;\r\n    let nodesToVisit = new Array(); //Represents the vertices in the stack\r\n    let visited = new Array(20); //Represents whether a node has been visited or not\r\n    let prevBoard = new Array(20); //Stores data of the previous node\r\n    for(i = 0; i < 20; ++i) {\r\n        visited[i] = new Array(40);\r\n        prevBoard[i] = new Array(40);\r\n        for(j = 0; j < 40; ++j) {\r\n            visited[i][j] = false;\r\n            if(grid[i * 40 + j] === 's') {\r\n                s1 = i;\r\n                s2 = j;\r\n            }\r\n            if(grid[i * 40 + j] === 'e') {\r\n                e1 = i;\r\n                e2 = j;\r\n            }\r\n            if(grid[i * 40 + j] === 'o') {\r\n                visited[i][j] = true;\r\n            }\r\n        }\r\n    }\r\n    nodesToVisit.push(s1);\r\n    nodesToVisit.push(s2);\r\n    visited[s1][s2] = true;\r\n    while(nodesToVisit.length !== 0) {\r\n        t2 = nodesToVisit[nodesToVisit.length - 1];\r\n        t1 = nodesToVisit[nodesToVisit.length - 2];\r\n        nodesToVisit.pop();\r\n        nodesToVisit.pop();\r\n        if(t1 === e1 && t2 === e2) {\r\n            break;\r\n        }\r\n        if(num !== 0) {\r\n            visitedNodes.push(t1, t2);\r\n         }\r\n         if(diagonal) {\r\n            if(t1 > 0 && t2 > 0 && !visited[t1 - 1][t2 - 1] && grid[t1 * 40 + t2 - 1] !== 'o' &&  grid[(t1 - 1) * 40 + t2] !== 'o') { // Top Left Diagonal\r\n                visited[t1 - 1][t2 - 1] = true;\r\n                nodesToVisit.push(t1 - 1);\r\n                nodesToVisit.push(t2 - 1);\r\n                prevBoard[t1 - 1][t2 - 1] = new Box(t1, t2);\r\n            }\r\n            if(t1 > 0 && t2 < 39 && !visited[t1 - 1][t2 + 1] && grid[(t1 - 1) * 40 + t2] !== 'o' &&  grid[t1 * 40 + t2 + 1] !== 'o') { // Top Right Diagonal\r\n                visited[t1 - 1][t2 + 1] = true;\r\n                nodesToVisit.push(t1 - 1);\r\n                nodesToVisit.push(t2 + 1);\r\n                prevBoard[t1 - 1][t2 + 1] = new Box(t1, t2);\r\n            }\r\n            if(t1 < 19 && t2 > 0 && !visited[t1 + 1][t2 - 1] && grid[(t1 + 1) * 40 + t2] !== 'o' &&  grid[t1 * 40 + t2 - 1] !== 'o') { // Bottom Left Diagonal\r\n                visited[t1 + 1][t2 - 1] = true;\r\n                nodesToVisit.push(t1 + 1);\r\n                nodesToVisit.push(t2 - 1);\r\n                prevBoard[t1 + 1][t2 - 1] = new Box(t1, t2);\r\n            }\r\n            if(t1 < 19 && t2 < 39 && !visited[t1 + 1][t2 + 1] && grid[(t1 + 1) * 40 + t2] !== 'o' &&  grid[t1 * 40 + t2 + 1] !== 'o') { // Bottom Right Diagonal\r\n                visited[t1 + 1][t2 + 1] = true;\r\n                nodesToVisit.push(t1 + 1);\r\n                nodesToVisit.push(t2 + 1);\r\n                prevBoard[t1 + 1][t2 + 1] = new Box(t1, t2);\r\n            }\r\n        }\r\n        if(t1 > 0 && !visited[t1 - 1][t2]) {\r\n            visited[t1 - 1][t2] = true;\r\n            nodesToVisit.push(t1 - 1);\r\n            nodesToVisit.push(t2);\r\n            prevBoard[t1 - 1][t2] = new Box(t1, t2);\r\n        }\r\n        if(t1 < 19 && !visited[t1 + 1][t2]) {\r\n            visited[t1 + 1][t2] = true;\r\n            nodesToVisit.push(t1 + 1);\r\n            nodesToVisit.push(t2);\r\n            prevBoard[t1 + 1][t2] = new Box(t1, t2);\r\n        }\r\n        if(t2 > 0 && !visited[t1][t2 - 1]) {\r\n            visited[t1][t2 - 1] = true;\r\n            nodesToVisit.push(t1);\r\n            nodesToVisit.push(t2 - 1);\r\n            prevBoard[t1][t2 - 1] = new Box(t1, t2);\r\n        }\r\n        if(t2 < 39 && !visited[t1][t2 + 1]) {\r\n            visited[t1][t2 + 1] = true;\r\n            nodesToVisit.push(t1);\r\n            nodesToVisit.push(t2 + 1);\r\n            prevBoard[t1][t2 + 1] = new Box(t1, t2);\r\n        }\r\n        ++num;\r\n    }\r\n    i = e1;\r\n    j = e2;\r\n    if(!visited[e1][e2]) {\r\n        return false;\r\n    }\r\n    while(prevBoard[i][j].getRow() !== s1 || prevBoard[i][j].getCol() !== s2) {\r\n        grid[prevBoard[i][j].getRow() * 40 + prevBoard[i][j].getCol()] = 'p';\r\n        finalPath.push(prevBoard[i][j].getRow());\r\n        finalPath.push(prevBoard[i][j].getCol());\r\n        let temp1 = i;\r\n        i = prevBoard[i][j].getRow();\r\n        j = prevBoard[temp1][j].getCol();\r\n    }\r\n    return true;\r\n}\r\n\r\nexport {depthFirstMain}","import {grid} from '../Grid';\r\nimport {diagonal} from '../Grid';\r\nimport {visitedNodes} from '../Grid';\r\nimport {finalPath} from '../Grid';\r\n\r\n//Implementation of Breadth First Search Algorithm\r\n\r\nclass Box {\r\n    constructor(r, c) {\r\n        this.prevRow = r;\r\n        this.prevCol = c;\r\n    }\r\n    getRow() {\r\n        return this.prevRow;\r\n    }\r\n    getCol() {\r\n        return this.prevCol;\r\n    }\r\n}\r\n\r\nfunction breadthFirstMain() {\r\n    let i, j, s1, s2, e1, e2, t1, t2, num = 0;\r\n    let visited = new Array(20);\r\n    let prevBoard = new Array(20);\r\n    let level = new Array();\r\n    for(i = 0; i < 20; ++i) {\r\n        visited[i] = new Array(40);\r\n        prevBoard[i] = new Array(40);\r\n        for(j = 0; j < 40; ++j) {\r\n            visited[i][j] = false;\r\n            if(grid[i * 40 + j] === 's') {\r\n                s1 = i;\r\n                s2 = j;\r\n            }\r\n            if(grid[i * 40 + j] === 'e') {\r\n                e1 = i;\r\n                e2 = j;\r\n            }\r\n            if(grid[i * 40 + j] === 'o') {\r\n                visited[i][j] = true;\r\n            }\r\n        }\r\n    }\r\n    level.push(s1);\r\n    level.push(s2);\r\n    visited[s1][s2] = true;\r\n    while(level.length !== 0) {\r\n        t1 = level[0];\r\n        t2 = level[1];\r\n        level.shift();\r\n        level.shift();\r\n        if(t1 === e1 && t2 === e2) {\r\n            break;\r\n        }\r\n        if(num !== 0) {\r\n           visitedNodes.push(t1, t2);\r\n        }\r\n        if(t1 > 0 && !visited[t1 - 1][t2]) { // Up\r\n            visited[t1 - 1][t2] = true;\r\n            level.push(t1 - 1);\r\n            level.push(t2);\r\n            prevBoard[t1 - 1][t2] = new Box(t1, t2);\r\n        }\r\n        if(t1 < 19 && !visited[t1 + 1][t2]) { // Down\r\n            visited[t1 + 1][t2] = true;\r\n            level.push(t1 + 1);\r\n            level.push(t2);\r\n            prevBoard[t1 + 1][t2] = new Box(t1, t2);\r\n        }\r\n        if(t2 > 0 && !visited[t1][t2 - 1]) { // Left\r\n            visited[t1][t2 - 1] = true;\r\n            level.push(t1);\r\n            level.push(t2 - 1);\r\n            prevBoard[t1][t2 - 1] = new Box(t1, t2);\r\n        }\r\n        if(t2 < 39 && !visited[t1][t2 + 1]) { // Right\r\n            visited[t1][t2 + 1] = true;\r\n            level.push(t1);\r\n            level.push(t2 + 1);\r\n            prevBoard[t1][t2 + 1] = new Box(t1, t2);\r\n        }\r\n        if(diagonal) {\r\n            if(t1 > 0 && t2 > 0 && !visited[t1 - 1][t2 - 1] && grid[t1 * 40 + t2 - 1] !== 'o' &&  grid[(t1 - 1) * 40 + t2] !== 'o') { // Top Left Diagonal\r\n                visited[t1 - 1][t2 - 1] = true;\r\n                level.push(t1 - 1);\r\n                level.push(t2 - 1);\r\n                prevBoard[t1 - 1][t2 - 1] = new Box(t1, t2);\r\n            }\r\n            if(t1 > 0 && t2 < 39 && !visited[t1 - 1][t2 + 1] && grid[(t1 - 1) * 40 + t2] !== 'o' &&  grid[t1 * 40 + t2 + 1] !== 'o') { // Top Right Diagonal\r\n                visited[t1 - 1][t2 + 1] = true;\r\n                level.push(t1 - 1);\r\n                level.push(t2 + 1);\r\n                prevBoard[t1 - 1][t2 + 1] = new Box(t1, t2);\r\n            }\r\n            if(t1 < 19 && t2 > 0 && !visited[t1 + 1][t2 - 1] && grid[(t1 + 1) * 40 + t2] !== 'o' &&  grid[t1 * 40 + t2 - 1] !== 'o') { // Bottom Left Diagonal\r\n                visited[t1 + 1][t2 - 1] = true;\r\n                level.push(t1 + 1);\r\n                level.push(t2 - 1);\r\n                prevBoard[t1 + 1][t2 - 1] = new Box(t1, t2);\r\n            }\r\n            if(t1 < 19 && t2 < 39 && !visited[t1 + 1][t2 + 1] && grid[(t1 + 1) * 40 + t2] !== 'o' &&  grid[t1 * 40 + t2 + 1] !== 'o') { // Bottom Right Diagonal\r\n                visited[t1 + 1][t2 + 1] = true;\r\n                level.push(t1 + 1);\r\n                level.push(t2 + 1);\r\n                prevBoard[t1 + 1][t2 + 1] = new Box(t1, t2);\r\n            }\r\n        }\r\n        ++num;\r\n    }\r\n    i = e1;\r\n    j = e2;\r\n    if(!visited[e1][e2]) {\r\n        return false;\r\n    }\r\n    while(prevBoard[i][j].getRow() !== s1 || prevBoard[i][j].getCol() !== s2) {\r\n        grid[prevBoard[i][j].getRow() * 40 + prevBoard[i][j].getCol()] = 'p';\r\n        finalPath.push(prevBoard[i][j].getRow());\r\n        finalPath.push(prevBoard[i][j].getCol());\r\n        let temp1 = i;\r\n        i = prevBoard[i][j].getRow();\r\n        j = prevBoard[temp1][j].getCol();\r\n    }\r\n    return true;\r\n}\r\n\r\nexport {breadthFirstMain}\r\n","import {grid} from '../Grid';\r\nimport {diagonal} from '../Grid';\r\nimport {visitedNodes} from '../Grid';\r\nimport {finalPath} from '../Grid';\r\n\r\n//Implementation of Djikstra's Algorithm\r\n\r\nclass Box {\r\n    constructor(r, c) {\r\n        this.prevRow = r;\r\n        this.prevCol = c;\r\n    }\r\n    getRow() {\r\n        return this.prevRow;\r\n    }\r\n    getCol() {\r\n        return this.prevCol;\r\n    }\r\n}\r\n\r\nclass Heap {\r\n    constructor() {\r\n        this.weight = [];\r\n        this.node = [];\r\n    }\r\n    empty() {\r\n        if(this.node.length === 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    pushHeap(index, w) {\r\n        this.node.push(index);\r\n        this.weight.push(w);\r\n        let i = this.node.length - 1, temp;\r\n        while(i > 0 && this.weight[i] < this.weight[Math.floor((i - 1) / 2)]) {\r\n            temp = this.weight[i];\r\n            this.weight[i] = this.weight[Math.floor((i - 1) / 2)];\r\n            this.weight[Math.floor((i - 1) / 2)] = temp;\r\n            temp = this.node[i];\r\n            this.node[i] = this.node[Math.floor((i - 1) / 2)];\r\n            this.node[Math.floor((i - 1) / 2)] = temp;\r\n            i = Math.floor((i - 1) / 2);\r\n        }\r\n    }\r\n    popHeap() {\r\n        let min = this.node[0];\r\n        this.node[0] =this.node[this.node.length - 1];\r\n        this.weight[0] = this.weight[this.weight.length - 1];\r\n        this.node.pop();\r\n        this.weight.pop();\r\n        let i = 0, tempMin, temp, nextIndex;\r\n        while(i * 2 + 1 < this.node.length) {\r\n            if(i * 2 + 2 < this.node.length) {\r\n                if(this.weight[i * 2 + 1] < this.weight[i * 2 + 2]) {\r\n                    tempMin = this.weight[i * 2 + 1];\r\n                    temp = this.node[i * 2 + 1];\r\n                    nextIndex = i * 2 + 1;\r\n                } else {\r\n                    tempMin = this.weight[i * 2 + 2];\r\n                    temp = this.node[i * 2 + 2];\r\n                    nextIndex = i * 2 + 2;\r\n                }\r\n            } else {\r\n                tempMin = this.weight[i * 2 + 1];\r\n                temp = this.node[i * 2 + 1];\r\n                nextIndex = i * 2 + 1;\r\n            }\r\n            if(tempMin < this.weight[i]) {\r\n                this.weight[nextIndex] = this.weight[i];\r\n                this.node[nextIndex] = this.node[i];\r\n                this.weight[i] = tempMin;\r\n                this.node[i] = temp;\r\n                i = nextIndex;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return min;\r\n    }\r\n}\r\n\r\nfunction djikstrasMain() {\r\n    let i, j, s1, s2, e1, e2, t1, t2, num = 0;\r\n    let weight = new Array(20);\r\n    let prevBoard = new Array(20);\r\n    let visited = new Array(20);\r\n    for(i = 0; i < 20; ++i) {\r\n        weight[i] = new Array(40);\r\n        prevBoard[i] = new Array(40);\r\n        visited[i] = new Array(40);\r\n        for(j = 0; j < 40; ++j) {\r\n            weight[i][j] = -1;\r\n            visited[i][j] = false;\r\n            if(grid[i * 40 + j] === 's') {\r\n                s1 = i;\r\n                s2 = j;\r\n            }\r\n            if(grid[i * 40 + j] === 'e') {\r\n                e1 = i;\r\n                e2 = j;\r\n            }\r\n            if(grid[i * 40 + j] === 'o') {\r\n                visited[i][j] = true;\r\n            }\r\n        }\r\n    }\r\n    weight[s1][s2] = 0;\r\n    let obj = new Heap();\r\n    obj.pushHeap(s1 * 40 + s2, 0);\r\n    while(!obj.empty()) {\r\n        let min = obj.popHeap();\r\n        t1 = Math.trunc(min / 40);\r\n        t2 = min % 40;\r\n        if(visited[t1][t2]) {\r\n            continue;\r\n        }\r\n        visited[t1][t2] = true;\r\n        if(t1 === e1 && t2 === e2) {\r\n            break;\r\n        }\r\n        if(num !== 0) {\r\n            //colorGrid(num, t1, t2);\r\n            visitedNodes.push(t1, t2);\r\n         } //Up\r\n        if(t1 > 0 && !visited[t1 - 1][t2] && (weight[t1][t2] + 1 < weight[t1 - 1][t2] || weight[t1 - 1][t2] === -1)) {\r\n            weight[t1 - 1][t2] = weight[t1][t2] + 1;\r\n            obj.pushHeap((t1 - 1) * 40 + t2, weight[t1 - 1][t2]);\r\n            prevBoard[t1 - 1][t2] = new Box(t1, t2);\r\n        } //Down\r\n        if(t1 < 19 && !visited[t1 + 1][t2] && (weight[t1][t2] + 1 < weight[t1 + 1][t2] || weight[t1 + 1][t2] === -1)) {\r\n            weight[t1 + 1][t2] = weight[t1][t2] + 1;\r\n            obj.pushHeap((t1 + 1) * 40 + t2, weight[t1 + 1][t2]);\r\n            prevBoard[t1 + 1][t2] = new Box(t1, t2);\r\n        } //Left\r\n        if(t2 > 0 && !visited[t1][t2 - 1] && (weight[t1][t2] + 1 < weight[t1][t2 - 1] || weight[t1][t2 - 1] === -1)) {\r\n            weight[t1][t2 - 1] = weight[t1][t2] + 1;\r\n            obj.pushHeap(t1 * 40 + (t2 - 1), weight[t1][t2 - 1]);\r\n            prevBoard[t1][t2 - 1] = new Box(t1, t2);\r\n        } //Right\r\n        if(t2 < 39 && !visited[t1][t2 + 1] && (weight[t1][t2] + 1 < weight[t1][t2 + 1] || weight[t1][t2 + 1] === -1)) {\r\n            weight[t1][t2 + 1] = weight[t1][t2] + 1;\r\n            obj.pushHeap(t1 * 40 + (t2 + 1), weight[t1][t2 + 1]);\r\n            prevBoard[t1][t2 + 1] = new Box(t1, t2);\r\n        }\r\n        if(diagonal) {\r\n            if(t1 > 0 && t2 > 0 && !visited[t1 - 1][t2 - 1] && grid[t1 * 40 + t2 - 1] !== 'o' &&  grid[(t1 - 1) * 40 + t2] !== 'o' && (weight[t1][t2] + Math.sqrt(2) < weight[t1 - 1][t2 - 1] || weight[t1 - 1][t2 - 1] === -1)) {\r\n                weight[t1 - 1][t2 - 1] = weight[t1][t2] + Math.sqrt(2);\r\n                obj.pushHeap((t1 - 1) * 40 + (t2 - 1), weight[t1 - 1][t2 - 1]);\r\n                prevBoard[t1 - 1][t2 - 1] = new Box(t1, t2);\r\n            } \r\n            if(t1 > 0 && t2 < 39 && !visited[t1 - 1][t2 + 1] && grid[(t1 - 1) * 40 + t2] !== 'o' &&  grid[t1 * 40 + t2 + 1] !== 'o' && (weight[t1][t2] + Math.sqrt(2) < weight[t1 - 1][t2 + 1] || weight[t1 - 1][t2 + 1] === -1)) {\r\n                weight[t1 - 1][t2 + 1] = weight[t1][t2] + Math.sqrt(2);\r\n                obj.pushHeap((t1 - 1) * 40 + (t2 + 1), weight[t1 - 1][t2 + 1]);\r\n                prevBoard[t1 - 1][t2 + 1] = new Box(t1, t2);\r\n            } \r\n            if(t1 < 19 && t2 > 0 && !visited[t1 + 1][t2 - 1] && grid[(t1 + 1) * 40 + t2] !== 'o' &&  grid[t1 * 40 + t2 - 1] !== 'o' && (weight[t1][t2] + Math.sqrt(2) < weight[t1 + 1][t2 - 1] || weight[t1 + 1][t2 - 1] === -1)) {\r\n                weight[t1 + 1][t2 - 1] = weight[t1][t2] + Math.sqrt(2);\r\n                obj.pushHeap((t1 + 1) * 40 + (t2 - 1), weight[t1 + 1][t2 - 1]);\r\n                prevBoard[t1 + 1][t2 - 1] = new Box(t1, t2);\r\n            } \r\n            if(t1 < 19 && t2 < 39 && !visited[t1 + 1][t2 + 1] && grid[(t1 + 1) * 40 + t2] !== 'o' &&  grid[t1 * 40 + t2 + 1] !== 'o' && (weight[t1][t2] + Math.sqrt(2) < weight[t1 + 1][t2 + 1] || weight[t1 + 1][t2 + 1] === -1)) {\r\n                weight[t1 + 1][t2 + 1] = weight[t1][t2] + 1;\r\n                obj.pushHeap((t1 + 1) * 40 + (t2 + 1), weight[t1 + 1][t2 + 1]);\r\n                prevBoard[t1 + 1][t2 + 1] = new Box(t1, t2);\r\n            }\r\n        }\r\n        ++num;\r\n    }\r\n    i = e1;\r\n    j = e2;\r\n    if(!visited[e1][e2]) {\r\n        return false;\r\n    }\r\n    while(prevBoard[i][j].getRow() !== s1 || prevBoard[i][j].getCol() !== s2) {\r\n        grid[prevBoard[i][j].getRow() * 40 + prevBoard[i][j].getCol()] = 'p';\r\n        finalPath.push(prevBoard[i][j].getRow());\r\n        finalPath.push(prevBoard[i][j].getCol());\r\n        let temp1 = i;\r\n        i = prevBoard[i][j].getRow();\r\n        j = prevBoard[temp1][j].getCol();\r\n    }\r\n    return true;\r\n}\r\n\r\nexport {djikstrasMain}","import {grid} from '../Grid';\r\nimport {diagonal} from '../Grid';\r\nimport {visitedNodes} from '../Grid';\r\nimport {finalPath} from '../Grid';\r\n\r\n//Implementation of Bellman-Ford Algorithm\r\n\r\nclass Box {\r\n    constructor(r, c) {\r\n        this.prevRow = r;\r\n        this.prevCol = c;\r\n    }\r\n    getRow() {\r\n        return this.prevRow;\r\n    }\r\n    getCol() {\r\n        return this.prevCol;\r\n    }\r\n}\r\n\r\nfunction bellmanFordMain() {\r\n    let i, j, k, s1, s2, e1, e2;\r\n    let update = false;\r\n    let prevBoard = new Array(20);\r\n    let weight = new Array(20);\r\n    for(i = 0; i < 20; ++i) {\r\n        prevBoard[i] = new Array(40);\r\n        weight[i] = new Array(40);\r\n        for(j = 0; j < 40; ++j) {\r\n            weight[i][j] = -1;\r\n            if(grid[i * 40 + j] === 's') {\r\n                s1 = i;\r\n                s2 = j;\r\n            }\r\n            if(grid[i * 40 + j] === 'e') {\r\n                e1 = i;\r\n                e2 = j;\r\n            }\r\n        }\r\n    }\r\n    weight[s1][s2] = 0;\r\n    for(k = 0; k < 799; ++k) {\r\n        for(i = 0; i < 20; ++i) {\r\n            for(j = 0; j < 40; ++j) {\r\n                if(grid[i * 40 + j] !== 'o' && weight[i][j] !== -1) {\r\n                    if(i > 0 && grid[(i - 1) * 40 + j] !== 'o' && (weight[i - 1][j]  === -1 || weight[i][j] + 1 < weight[i - 1][j])) {\r\n                        if(i - 1 !== e1 || j !== e2) {\r\n                            visitedNodes.push(i - 1, j);\r\n                        }\r\n                        weight[i - 1][j] = weight[i][j] + 1;\r\n                        prevBoard[i - 1][j] = new Box(i, j);\r\n                        update = true;\r\n                    }\r\n                    if(i < 19 && grid[(i + 1) * 40 + j] !== 'o' && (weight[i + 1][j]  === -1 || weight[i][j] + 1 < weight[i + 1][j])) {\r\n                        if(i + 1 !== e1 || j !== e2) {\r\n                            visitedNodes.push(i + 1, j);\r\n                        }\r\n                        weight[i + 1][j] = weight[i][j] + 1;\r\n                        prevBoard[i + 1][j] = new Box(i, j);\r\n                        update = true;\r\n                    }\r\n                    if(j > 0 && grid[i * 40 + (j - 1)] !== 'o' && (weight[i][j - 1]  === -1 || weight[i][j] + 1 < weight[i][j - 1])) {\r\n                        if(i !== e1 || j - 1 !== e2) {\r\n                            visitedNodes.push(i, j - 1);\r\n                        }\r\n                        weight[i][j - 1] = weight[i][j] + 1;\r\n                        prevBoard[i][j - 1] = new Box(i, j);\r\n                        update = true;\r\n                    }\r\n                    if(j < 39 && grid[i * 40 + (j + 1)] !== 'o' && (weight[i][j + 1]  === -1 || weight[i][j] + 1 < weight[i][j + 1])) {\r\n                        if(i !== e1 || j + 1 !== e2) {\r\n                            visitedNodes.push(i, j + 1);\r\n                        }\r\n                        weight[i][j + 1] = weight[i][j] + 1;\r\n                        prevBoard[i][j + 1] = new Box(i, j);\r\n                        update = true;\r\n                    }\r\n                    if(diagonal) {\r\n                        if(i > 0 && j > 0 && grid[(i - 1) * 40 + (j - 1)] !== 'o' && grid[(i - 1) * 40 + j] !== 'o' && grid[i * 40 + (j - 1)] !== 'o' && (weight[i - 1][j - 1]  === -1 || weight[i][j] + Math.sqrt(2) < weight[i - 1][j - 1])) {\r\n                            if(i - 1 !== e1 || j - 1 !== e2) {\r\n                                visitedNodes.push(i - 1, j - 1);\r\n                            }\r\n                            weight[i - 1][j - 1] = weight[i][j] + Math.sqrt(2);\r\n                            prevBoard[i - 1][j - 1] = new Box(i, j);\r\n                            update = true;\r\n                        }\r\n                        if(i > 0 && j < 39 && grid[(i - 1) * 40 + (j + 1)] !== 'o' && grid[(i - 1) * 40 + j] !== 'o' && grid[i * 40 + (j + 1)]  !== 'o' && (weight[i - 1][j + 1]  === -1 || weight[i][j] + Math.sqrt(2) < weight[i - 1][j + 1])) {\r\n                            if(i - 1 !== e1 || j + 1 !== e2) {\r\n                                visitedNodes.push(i - 1, j + 1);\r\n                            }\r\n                            weight[i - 1][j + 1] = weight[i][j] + Math.sqrt(2);\r\n                            prevBoard[i - 1][j + 1] = new Box(i, j);\r\n                            update = true;\r\n                        }\r\n                        if(i < 19 && j > 0 && grid[(i + 1) * 40 + (j - 1)] !== 'o' && grid[(i + 1) * 40 + j] !== 'o' && grid[i * 40 + (j - 1)] !== 'o' && (weight[i + 1][j - 1]  === -1 || weight[i][j] + Math.sqrt(2) < weight[i + 1][j - 1])) {\r\n                            if(i + 1 !== e1 || j - 1 !== e2) {\r\n                                visitedNodes.push(i + 1, j - 1);\r\n                            }\r\n                            weight[i + 1][j - 1] = weight[i][j] + Math.sqrt(2);\r\n                            prevBoard[i + 1][j - 1] = new Box(i, j);\r\n                            update = true;\r\n                        }\r\n                        if(i < 19 && j < 39 && grid[(i + 1) * 40 + (j + 1)] !== 'o' && grid[(i + 1) * 40 + j] !== 'o' && grid[i * 40 + (j + 1)] !== 'o' && (weight[i + 1][j + 1]  === -1 || weight[i][j] + Math.sqrt(2) < weight[i + 1][j + 1])) {\r\n                            if(i + 1 !== e1 || j + 1 !== e2) {\r\n                                visitedNodes.push(i + 1, j + 1);\r\n                            }\r\n                            weight[i + 1][j + 1] = weight[i][j] + Math.sqrt(2);\r\n                            prevBoard[i + 1][j + 1] = new Box(i, j);\r\n                            update = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if(update) {\r\n            update = false;\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n    i = e1;\r\n    j = e2;\r\n    if(weight[e1][e2] === -1) {\r\n        return false;\r\n    }\r\n    while(prevBoard[i][j].getRow() !== s1 || prevBoard[i][j].getCol() !== s2) {\r\n        grid[prevBoard[i][j].getRow() * 40 + prevBoard[i][j].getCol()] = 'p';\r\n        finalPath.push(prevBoard[i][j].getRow());\r\n        finalPath.push(prevBoard[i][j].getCol());\r\n        let temp1 = i;\r\n        i = prevBoard[i][j].getRow();\r\n        j = prevBoard[temp1][j].getCol();\r\n    }\r\n    return true;\r\n}\r\n\r\nexport {bellmanFordMain}","import React from 'react';\r\nimport Square from './Square';\r\nimport Button from './Button';\r\nimport Legend from './Legend';\r\nimport {start} from './Square';\r\nimport {end} from './Square';\r\nimport {choose} from './Square';\r\nimport {resetStartEnd} from './Square';\r\nimport {isSolved} from './Square';\r\nimport {algo} from './Button';\r\nimport {depthFirstMain} from './SolvingAlgorithms/DepthFirst'\r\nimport {breadthFirstMain} from './SolvingAlgorithms/BreadthFirst'\r\nimport {djikstrasMain} from './SolvingAlgorithms/Djikstras';\r\nimport {bellmanFordMain} from './SolvingAlgorithms/BellmanFord';\r\nimport {aStarMain} from './SolvingAlgorithms/AStar';\r\nimport 'c:/UMICH/Projects/path-finding/src/styles/index.css';\r\n\r\nlet grid;\r\nlet visitedNodes;\r\nlet finalPath;\r\nlet hover = false; \r\nlet diagonal = false;\r\nlet working = false;\r\nlet solving = false;\r\n\r\n//Colors the solved grid\r\nfunction colorGrid(i) {\r\n  if(i < 400) {\r\n    document.getElementsByClassName('square')[visitedNodes[i] * 40 + visitedNodes[i + 1]].style = 'background-color: #FF9AA2';\r\n  } else if(i < 800) {\r\n    document.getElementsByClassName('square')[visitedNodes[i] * 40 + visitedNodes[i + 1]].style = 'background-color: #FFB7B2';\r\n  } else if(i < 1200) {\r\n  document.getElementsByClassName('square')[visitedNodes[i] * 40 + visitedNodes[i + 1]].style = 'background-color: #FFDAC1';\r\n  } else  {\r\n    document.getElementsByClassName('square')[visitedNodes[i] * 40 + visitedNodes[i + 1]].style = 'background-color: #E2F0CB';\r\n  }\r\n}\r\n\r\n//Represents the playing board/grid\r\nclass Grid extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      squares: Array(800).fill(null),\r\n    };\r\n  }\r\n\r\n  //Handles call back event when a square is clicked\r\n  handleClick(i) { \r\n    const squares = this.state.squares.slice();\r\n    if(choose) {\r\n      if(!start) {\r\n        squares[i] = 's';\r\n      } else if(!end) {\r\n        squares[i] = 'e';\r\n      } else {\r\n        squares[i] = 'o';\r\n      }\r\n    } else {\r\n      squares[i] = null;\r\n    }    \r\n    this.setState({squares: squares});\r\n  }\r\n\r\n  //Handles callback event when changes are made to the hovering functionality\r\n  handleHoverChanged() {\r\n    if(!hover) {\r\n      hover = true;\r\n    } else {\r\n      hover = false;\r\n    }\r\n  }\r\n\r\n  //Handles callback event when the board is reset\r\n  handleReset() {\r\n    if(!solving) {\r\n      resetStartEnd();\r\n      grid = Array(800).fill(null);\r\n      this.setState({squares: grid});\r\n      for(let i = 0; i < 800; ++i) {\r\n          document.getElementsByClassName('square')[i].style = 'background-color: white';\r\n      }\r\n    }\r\n  }\r\n\r\n  //Handles callback event when the path is removed\r\n  handleResetPath() {\r\n    if(!solving) {\r\n      for(let i = 0; i < 800; ++i) {\r\n        if(this.state.squares[i] !== 's' && this.state.squares[i] !== 'e' && this.state.squares[i] !== 'o'){\r\n          document.getElementsByClassName('square')[i].style = 'background-color: white';\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  //Handles callback event when diagonals are enabled in the final path\r\n  diagonalsEnabled() {\r\n    if(!diagonal) {\r\n      diagonal = true;\r\n    } else {\r\n      diagonal = false;\r\n    }\r\n  }\r\n\r\n  //Handles callback event when changes are made to whether user wishes to see the algorithm's step-by-step working\r\n  enableAlgorithmWorking() {\r\n    if(!working) {\r\n        working = true;\r\n    } else {\r\n      working = false;\r\n    }\r\n  }\r\n\r\n  //Handles callback event when the solve button is clicked\r\n  handleSolve() { \r\n    if(!solving) {\r\n    solving = true;\r\n    grid = this.state.squares;\r\n    for(let i = 0; i < 800; ++i) {\r\n      if(grid[i] === 'p') {\r\n        grid[i] = null;\r\n      }\r\n      if(!grid[i]) {\r\n        document.getElementsByClassName('square')[i].style = 'background-color: white';\r\n      }\r\n    }\r\n    visitedNodes = [];\r\n    finalPath = [];\r\n    //Deals with invalid grid\r\n    if(!(start && end)) {\r\n      this.setState({squares: grid});\r\n      alert('You must choose a start and an end!');\r\n      return;\r\n    }\r\n    let solvable;\r\n    if(algo === 1) {\r\n      solvable = breadthFirstMain();\r\n    } else if(algo === 2) {\r\n      solvable = depthFirstMain();\r\n    } else if(algo === 3){\r\n      solvable = djikstrasMain();\r\n    } else if(algo === 4){\r\n      solvable = bellmanFordMain();\r\n    } else {\r\n      solvable = aStarMain();\r\n    }\r\n      let i = 0;\r\n      //Displaying the result\r\n      if(working) {\r\n        let handle = setInterval(function() {\r\n          if(visitedNodes.length !== 0) {\r\n            colorGrid(i);\r\n          }\r\n          i = i + 2;\r\n          if(i >= visitedNodes.length) {\r\n            clearInterval(handle);\r\n            if(solvable) {\r\n              for(let i = finalPath.length - 1; i >= 0; i = i - 2) {\r\n                document.getElementsByClassName('square')[finalPath[i - 1] * 40 + finalPath[i]].style = 'background-color: yellow';\r\n              }\r\n            } else {\r\n              alert('No path found!');\r\n            }\r\n            solving = false;\r\n          }\r\n        }, 10);\r\n      } else {\r\n        if(solvable) {\r\n          for(let i = finalPath.length - 1; i >= 0; i = i - 2) {\r\n            document.getElementsByClassName('square')[finalPath[i - 1] * 40 + finalPath[i]].style = 'background-color: yellow';\r\n          }\r\n        } else {\r\n          alert('No path found!');\r\n        }\r\n        solving = false;\r\n      }\r\n    isSolved();\r\n    }\r\n  }\r\n\r\n  //Renders each individual square\r\n  renderSquare(i) { \r\n    return (\r\n      <div>\r\n         <Square id={i} \r\n         value={this.state.squares[i]}\r\n         onClick={() => this.handleClick(i)}\r\n         />\r\n      </div>\r\n      );\r\n  }\r\n  //Renders squares of each row\r\n  renderRow(r) {\r\n    return (\r\n      <div>\r\n        {this.renderSquare(r)}\r\n        {this.renderSquare(r + 1)}\r\n        {this.renderSquare(r + 2)}\r\n        {this.renderSquare(r + 3)}\r\n        {this.renderSquare(r + 4)}\r\n        {this.renderSquare(r + 5)}\r\n        {this.renderSquare(r + 6)}\r\n        {this.renderSquare(r + 7)}\r\n        {this.renderSquare(r + 8)}\r\n        {this.renderSquare(r + 9)}\r\n        {this.renderSquare(r + 10)}\r\n        {this.renderSquare(r + 11)}\r\n        {this.renderSquare(r + 12)}\r\n        {this.renderSquare(r + 13)}\r\n        {this.renderSquare(r + 14)}\r\n        {this.renderSquare(r + 15)}\r\n        {this.renderSquare(r + 16)}\r\n        {this.renderSquare(r + 17)}\r\n        {this.renderSquare(r + 18)}\r\n        {this.renderSquare(r + 19)}\r\n        {this.renderSquare(r + 20)}\r\n        {this.renderSquare(r + 21)}\r\n        {this.renderSquare(r + 22)}\r\n        {this.renderSquare(r + 23)}\r\n        {this.renderSquare(r + 24)}\r\n        {this.renderSquare(r + 25)}\r\n        {this.renderSquare(r + 26)}\r\n        {this.renderSquare(r + 27)}\r\n        {this.renderSquare(r + 28)}\r\n        {this.renderSquare(r + 29)}\r\n        {this.renderSquare(r + 30)}\r\n        {this.renderSquare(r + 31)}\r\n        {this.renderSquare(r + 32)}\r\n        {this.renderSquare(r + 33)}\r\n        {this.renderSquare(r + 34)}\r\n        {this.renderSquare(r + 35)}\r\n        {this.renderSquare(r + 36)}\r\n        {this.renderSquare(r + 37)}\r\n        {this.renderSquare(r + 38)}\r\n        {this.renderSquare(r + 39)}\r\n      </div>\r\n    )\r\n  }\r\n\r\n   //Renders the grid\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button \r\n        onClick={() => this.handleSolve()}\r\n        onReset={() => this.handleReset()}\r\n        onHover={() => this.handleHoverChanged()}\r\n        onDiagonal={() => this.diagonalsEnabled()}\r\n        seeWorking={() => this.enableAlgorithmWorking()}\r\n        onResetPath={() => this.handleResetPath()} />\r\n        <Legend />\r\n        <div className=\"board\">\r\n          <div className=\"board-row\">\r\n            {this.renderRow(0)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderRow(40)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderRow(80)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderRow(120)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderRow(160)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderRow(200)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderRow(240)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderRow(280)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderRow(320)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderRow(360)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderRow(400)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderRow(440)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderRow(480)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderRow(520)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderRow(560)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderRow(600)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderRow(640)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderRow(680)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderRow(720)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderRow(760)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Grid\r\nexport {grid}\r\nexport {visitedNodes}\r\nexport {finalPath}\r\nexport {hover}\r\nexport {diagonal}\r\nexport {working}\r\nexport {solving}","import {grid} from '../Grid';\r\nimport {diagonal} from '../Grid';\r\nimport {visitedNodes} from '../Grid';\r\nimport {finalPath} from '../Grid';\r\n\r\n//Implementation of A* Search Algorithm\r\n\r\nclass Box {\r\n    constructor(r, c) {\r\n        this.prevRow = r;\r\n        this.prevCol = c;\r\n    }\r\n    getRow() {\r\n        return this.prevRow;\r\n    }\r\n    getCol() {\r\n        return this.prevCol;\r\n    }\r\n}\r\n\r\nclass Heap {\r\n    constructor() {\r\n        this.distance = [];\r\n        this.node = [];\r\n    }\r\n    empty() {\r\n        if(this.node.length === 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    pushHeap(index, d) {\r\n        this.node.push(index);\r\n        this.distance.push(d);\r\n        let i = this.node.length - 1, temp;\r\n        while(i > 0 && this.distance[i] < this.distance[Math.floor((i - 1) / 2)]) {\r\n            temp = this.distance[i];\r\n            this.distance[i] = this.distance[Math.floor((i - 1) / 2)];\r\n            this.distance[Math.floor((i - 1) / 2)] = temp;\r\n            temp = this.node[i];\r\n            this.node[i] = this.node[Math.floor((i - 1) / 2)];\r\n            this.node[Math.floor((i - 1) / 2)] = temp;\r\n            i = Math.floor((i - 1) / 2);\r\n        }\r\n    }\r\n    popHeap() {\r\n        let min = this.node[0];\r\n        this.node[0] =this.node[this.node.length - 1];\r\n        this.distance[0] = this.distance[this.distance.length - 1];\r\n        this.node.pop();\r\n        this.distance.pop();\r\n        let i = 0, tempMin, temp, nextIndex;\r\n        while(i * 2 + 1 < this.node.length) {\r\n            if(i * 2 + 2 < this.node.length) {\r\n                if(this.distance[i * 2 + 1] < this.distance[i * 2 + 2]) {\r\n                    tempMin = this.distance[i * 2 + 1];\r\n                    temp = this.node[i * 2 + 1];\r\n                    nextIndex = i * 2 + 1;\r\n                } else {\r\n                    tempMin = this.distance[i * 2 + 2];\r\n                    temp = this.node[i * 2 + 2];\r\n                    nextIndex = i * 2 + 2;\r\n                }\r\n            } else {\r\n                tempMin = this.distance[i * 2 + 1];\r\n                temp = this.node[i * 2 + 1];\r\n                nextIndex = i * 2 + 1;\r\n            }\r\n            if(tempMin < this.distance[i]) {\r\n                this.distance[nextIndex] = this.distance[i];\r\n                this.node[nextIndex] = this.node[i];\r\n                this.distance[i] = tempMin;\r\n                this.node[i] = temp;\r\n                i = nextIndex;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return min;\r\n    }\r\n}\r\n\r\nfunction aStarMain() {\r\n    let i, j, s1, s2, e1, e2, t1, t2, num = 0;\r\n    let weight = new Array(20);\r\n    let prevBoard = new Array(20);\r\n    let visited = new Array(20);\r\n    for(i = 0; i < 20; ++i) {\r\n        weight[i] = new Array(40);\r\n        prevBoard[i] = new Array(40);\r\n        visited[i] = new Array(40);\r\n        for(j = 0; j < 40; ++j) {\r\n            weight[i][j] = -1;\r\n            visited[i][j] = false;\r\n            if(grid[i * 40 + j] === 's') {\r\n                s1 = i;\r\n                s2 = j;\r\n            }\r\n            if(grid[i * 40 + j] === 'e') {\r\n                e1 = i;\r\n                e2 = j;\r\n            }\r\n            if(grid[i * 40 + j] === 'o') {\r\n                visited[i][j] = true;\r\n            }\r\n        }\r\n    }\r\n    weight[s1][s2] = 0;\r\n    let obj = new Heap();\r\n    obj.pushHeap(s1 * 40 + s2, Math.sqrt(Math.pow(s1 - e1, 2) + Math.pow(s2 - e2, 2)));\r\n    while(!obj.empty()) {\r\n        let min = obj.popHeap();\r\n        t1 = Math.trunc(min / 40);\r\n        t2 = min % 40;\r\n        if(visited[t1][t2]) {\r\n            continue;\r\n        }\r\n        visited[t1][t2] = true;\r\n        if(t1 === e1 && t2 === e2) {\r\n            break;\r\n        }\r\n        if(num !== 0) {\r\n            visitedNodes.push(t1, t2);\r\n         } //Up\r\n        if(t1 > 0 && !visited[t1 - 1][t2] && (weight[t1][t2] + 1 < weight[t1 - 1][t2] || weight[t1 - 1][t2] === -1)) {\r\n            weight[t1 - 1][t2] = weight[t1][t2] + 1;\r\n            obj.pushHeap((t1 - 1) * 40 + t2, weight[t1 - 1][t2] + Math.sqrt(Math.pow(t1 - 1 - e1, 2) + Math.pow(t2 - e2, 2)));\r\n            prevBoard[t1 - 1][t2] = new Box(t1, t2);\r\n        } //Down\r\n        if(t1 < 19 && !visited[t1 + 1][t2] && (weight[t1][t2] + 1 < weight[t1 + 1][t2] || weight[t1 + 1][t2] === -1)) {\r\n            weight[t1 + 1][t2] = weight[t1][t2] + 1;\r\n            obj.pushHeap((t1 + 1) * 40 + t2, weight[t1 + 1][t2] + Math.sqrt(Math.pow(t1 + 1 - e1, 2) + Math.pow(t2 - e2, 2)));\r\n            prevBoard[t1 + 1][t2] = new Box(t1, t2);\r\n        } //Left\r\n        if(t2 > 0 && !visited[t1][t2 - 1] && (weight[t1][t2] + 1 < weight[t1][t2 - 1] || weight[t1][t2 - 1] === -1)) {\r\n            weight[t1][t2 - 1] = weight[t1][t2] + 1;\r\n            obj.pushHeap(t1 * 40 + (t2 - 1), weight[t1][t2 - 1] + Math.sqrt(Math.pow(t1 - e1, 2) + Math.pow(t2 - 1 - e2, 2)));\r\n            prevBoard[t1][t2 - 1] = new Box(t1, t2);\r\n        } //Right\r\n        if(t2 < 39 && !visited[t1][t2 + 1] && (weight[t1][t2] + 1 < weight[t1][t2 + 1] || weight[t1][t2 + 1] === -1)) {\r\n            weight[t1][t2 + 1] = weight[t1][t2] + 1;\r\n            obj.pushHeap(t1 * 40 + (t2 + 1), weight[t1][t2 + 1] + Math.sqrt(Math.pow(t1 - e1, 2) + Math.pow(t2  + 1 - e2, 2)));\r\n            prevBoard[t1][t2 + 1] = new Box(t1, t2);\r\n        }\r\n        if(diagonal) {\r\n            if(t1 > 0 && t2 > 0 && !visited[t1 - 1][t2 - 1] && grid[t1 * 40 + t2 - 1] !== 'o' &&  grid[(t1 - 1) * 40 + t2] !== 'o' && (weight[t1][t2] + Math.sqrt(2) < weight[t1 - 1][t2 - 1] || weight[t1 - 1][t2 - 1] === -1)) {\r\n                weight[t1 - 1][t2 - 1] = weight[t1][t2] + Math.sqrt(2);\r\n                obj.pushHeap((t1 - 1) * 40 + (t2 - 1), weight[t1 - 1][t2 - 1] + Math.sqrt(Math.pow(t1 - 1 - e1, 2) + Math.pow(t2 - 1 - e2, 2)));\r\n                prevBoard[t1 - 1][t2 - 1] = new Box(t1, t2);\r\n            } \r\n            if(t1 > 0 && t2 < 39 && !visited[t1 - 1][t2 + 1] && grid[(t1 - 1) * 40 + t2] !== 'o' &&  grid[t1 * 40 + t2 + 1] !== 'o' && (weight[t1][t2] + Math.sqrt(2) < weight[t1 - 1][t2 + 1] || weight[t1 - 1][t2 + 1] === -1)) {\r\n                weight[t1 - 1][t2 + 1] = weight[t1][t2] + Math.sqrt(2);\r\n                obj.pushHeap((t1 - 1) * 40 + (t2 + 1), weight[t1 - 1][t2 + 1] + Math.sqrt(Math.pow(t1 - 1 - e1, 2) + Math.pow(t2 + 1 - e2, 2)));\r\n                prevBoard[t1 - 1][t2 + 1] = new Box(t1, t2);\r\n            } \r\n            if(t1 < 19 && t2 > 0 && !visited[t1 + 1][t2 - 1] && grid[(t1 + 1) * 40 + t2] !== 'o' &&  grid[t1 * 40 + t2 - 1] !== 'o' && (weight[t1][t2] + Math.sqrt(2) < weight[t1 + 1][t2 - 1] || weight[t1 + 1][t2 - 1] === -1)) {\r\n                weight[t1 + 1][t2 - 1] = weight[t1][t2] + Math.sqrt(2);\r\n                obj.pushHeap((t1 + 1) * 40 + (t2 - 1), weight[t1 + 1][t2 - 1] + Math.sqrt(Math.pow(t1 + 1 - e1, 2) + Math.pow(t2 - 1 - e2, 2)));\r\n                prevBoard[t1 + 1][t2 - 1] = new Box(t1, t2);\r\n            } \r\n            if(t1 < 19 && t2 < 39 && !visited[t1 + 1][t2 + 1] && grid[(t1 + 1) * 40 + t2] !== 'o' &&  grid[t1 * 40 + t2 + 1] !== 'o' && (weight[t1][t2] + Math.sqrt(2) < weight[t1 + 1][t2 + 1] || weight[t1 + 1][t2 + 1] === -1)) {\r\n                weight[t1 + 1][t2 + 1] = weight[t1][t2] + 1;\r\n                obj.pushHeap((t1 + 1) * 40 + (t2 + 1), weight[t1 + 1][t2 + 1] + Math.sqrt(Math.pow(t1 + 1 - e1, 2) + Math.pow(t2 + 1 - e2, 2)));\r\n                prevBoard[t1 + 1][t2 + 1] = new Box(t1, t2);\r\n            }\r\n        }\r\n        ++num;\r\n    }\r\n    i = e1;\r\n    j = e2;\r\n    if(!visited[e1][e2]) {\r\n        return false;\r\n    }\r\n    while(prevBoard[i][j].getRow() !== s1 || prevBoard[i][j].getCol() !== s2) {\r\n        grid[prevBoard[i][j].getRow() * 40 + prevBoard[i][j].getCol()] = 'p';\r\n        finalPath.push(prevBoard[i][j].getRow());\r\n        finalPath.push(prevBoard[i][j].getCol());\r\n        let temp1 = i;\r\n        i = prevBoard[i][j].getRow();\r\n        j = prevBoard[temp1][j].getCol();\r\n    }\r\n    return true;\r\n}\r\n\r\nexport {aStarMain}","import React from 'react';\r\nimport 'c:/UMICH/Projects/path-finding/src/styles/instructions.css';\r\n\r\n//Intructions part\r\nclass Instructions extends React.Component {\r\n  constructor(props) {\r\n      super(props);\r\n    this.state = {\r\n      isActive: true,\r\n    }\r\n  }\r\n\r\n  hideInstructions() {\r\n    this.setState({\r\n      isActive: false,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.isActive) {\r\n      return (\r\n          <div className=\"alert alert-warning alert-dismissible\" role=\"alert\">\r\n            <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" onClick={() => this.hideInstructions()}>\r\n              <span aria-hidden=\"true\">&times;</span>\r\n            </button>\r\n            <h2>Instructions : </h2>\r\n            <h6>Welcome to <b>PathFinding Vision</b>, developed by <b>Abhik Mazumder</b>! Let's dive right into this project.</h6>\r\n            <p>This project allows you to visualize a path between two nodes on a board of your choice.</p>\r\n            <div>\r\n                <ol>\r\n                <li>The first node you click on will be the starting point.</li>\r\n                <li>The second node you click on will be the ending point.</li>\r\n                <li>The nodes you click on afterwards will be the obstacles.</li>\r\n                <li>You may reposition a node by clicking on it and then clicking on an unvisited node.</li>\r\n                <li>Solve the current grid using any of the five algorithms : <b>Breadth First Search, Depth First Search, Djikstra's Algorithm, Bellman-Ford Algorithm, or A* Search Algorithm.</b></li>\r\n                <li>You may clear the current path or the current board after solving.</li>\r\n                <li>Advanced features (recommended) include: <ul><li>Enabling obstacles upon hovering over the nodes.</li>\r\n                                                <li>Enabling diagonals in the calculated path.</li>\r\n                                                <li>Seeing the algorithm's step-by-step working.</li>\r\n                                                </ul>\r\n                You may use any of the these features by marking the checkboxes on the top right corner.</li>\r\n                </ol>\r\n            </div>\r\n            <p>You can even check out the source code on <a href=\"https://github.com/abhiktech/pathfinding-vision\" target =\"_blank\">github</a>.</p>\r\n            <h4>Let's start envisioning!</h4>\r\n          </div>\r\n      );\r\n    }\r\n    return <div/>\r\n  }\r\n}\r\n\r\nexport default Instructions;","import React from 'react';\nimport Grid from './Grid';\nimport Instructions from './Instructions';\n\n//Defines app structure\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Grid  />\n        <Instructions />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}